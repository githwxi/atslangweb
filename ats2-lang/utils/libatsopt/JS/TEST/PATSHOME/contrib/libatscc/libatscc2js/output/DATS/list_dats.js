/*
**
** The JavaScript code is generated by atscc2js
** The starting compilation time is: 2016-12-25: 21h:46m
**
*/

function
_ats2jspre_list_patsfun_31__closurerize(env0)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_31(cenv[1], arg0); }, env0];
}


function
_ats2jspre_list_patsfun_35__closurerize(env0)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_35(cenv[1], arg0); }, env0];
}


function
_ats2jspre_list_patsfun_38__closurerize(env0)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_38(cenv[1], arg0); }, env0];
}


function
_ats2jspre_list_patsfun_42__closurerize(env0)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_42(cenv[1], arg0); }, env0];
}


function
_ats2jspre_list_patsfun_46__closurerize(env0)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_46(cenv[1], arg0); }, env0];
}


function
_ats2jspre_list_patsfun_50__closurerize(env0)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_50(cenv[1], arg0); }, env0];
}


function
_ats2jspre_list_patsfun_53__closurerize(env0)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_53(cenv[1], arg0); }, env0];
}


function
_ats2jspre_list_patsfun_57__closurerize(env0)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_57(cenv[1], arg0); }, env0];
}


function
_ats2jspre_list_patsfun_61__closurerize(env0)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_61(cenv[1], arg0); }, env0];
}


function
_ats2jspre_list_patsfun_65__closurerize(env0, env1)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_65(cenv[1], cenv[2], arg0); }, env0, env1];
}


function
_ats2jspre_list_patsfun_69__closurerize(env0, env1)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_69(cenv[1], cenv[2], arg0); }, env0, env1];
}


function
_ats2jspre_list_patsfun_73__closurerize(env0, env1)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_73(cenv[1], cenv[2], arg0); }, env0, env1];
}


function
_ats2jspre_list_patsfun_77__closurerize(env0, env1)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_77(cenv[1], cenv[2], arg0); }, env0, env1];
}


function
_ats2jspre_list_patsfun_82__closurerize(env0)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_82(cenv[1], arg0); }, env0];
}


function
_ats2jspre_list_patsfun_85__closurerize(env0, env1)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_85(cenv[1], cenv[2], arg0); }, env0, env1];
}


function
_ats2jspre_list_patsfun_88__closurerize(env0, env1)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_88(cenv[1], cenv[2], arg0); }, env0, env1];
}


function
_ats2jspre_list_patsfun_90__closurerize(env0, env1)
{
  return [function(cenv, arg0) { return _ats2jspre_list_patsfun_90(cenv[1], cenv[2], arg0); }, env0, env1];
}


function
ats2jspre_list_make_intrange_2(arg0, arg1)
{
//
// knd = 0
  var tmpret2
  var tmplab, tmplab_js
//
  // __patsflab_list_make_intrange_2
  tmpret2 = ats2jspre_list_make_intrange_3(arg0, arg1, 1);
  return tmpret2;
} // end-of-function


function
ats2jspre_list_make_intrange_3(arg0, arg1, arg2)
{
//
// knd = 0
  var tmpret3
  var tmp14
  var tmp15
  var tmp16
  var tmp17
  var tmp18
  var tmp19
  var tmp20
  var tmp21
  var tmp22
  var tmp23
  var tmp24
  var tmp25
  var tmp26
  var tmp27
  var tmp28
  var tmp29
  var tmp30
  var tmp31
  var tmp32
  var tmp33
  var tmp34
  var tmplab, tmplab_js
//
  // __patsflab_list_make_intrange_3
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab6
      tmp14 = ats2jspre_gt_int0_int0(arg2, 0);
      if(!ATSCKpat_bool(tmp14, true)) { tmplab_js = 2; break; }
      tmp15 = ats2jspre_lt_int0_int0(arg0, arg1);
      if(tmp15) {
        tmp19 = ats2jspre_sub_int0_int0(arg1, arg0);
        tmp18 = ats2jspre_add_int0_int0(tmp19, arg2);
        tmp17 = ats2jspre_sub_int0_int0(tmp18, 1);
        tmp16 = ats2jspre_div_int0_int0(tmp17, arg2);
        tmp22 = ats2jspre_sub_int0_int0(tmp16, 1);
        tmp21 = ats2jspre_mul_int0_int0(tmp22, arg2);
        tmp20 = ats2jspre_add_int0_int0(arg0, tmp21);
        tmp23 = null;
        tmpret3 = _ats2jspre_list_loop1_4(tmp16, tmp20, arg2, tmp23);
      } else {
        tmpret3 = null;
      } // endif
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 2: // __atstmplab7
      tmp24 = ats2jspre_lt_int0_int0(arg2, 0);
      if(!ATSCKpat_bool(tmp24, true)) { tmplab_js = 3; break; }
      tmp25 = ats2jspre_gt_int0_int0(arg0, arg1);
      if(tmp25) {
        tmp26 = ats2jspre_neg_int0(arg2);
        tmp30 = ats2jspre_sub_int0_int0(arg0, arg1);
        tmp29 = ats2jspre_add_int0_int0(tmp30, tmp26);
        tmp28 = ats2jspre_sub_int0_int0(tmp29, 1);
        tmp27 = ats2jspre_div_int0_int0(tmp28, tmp26);
        tmp33 = ats2jspre_sub_int0_int0(tmp27, 1);
        tmp32 = ats2jspre_mul_int0_int0(tmp33, tmp26);
        tmp31 = ats2jspre_sub_int0_int0(arg0, tmp32);
        tmp34 = null;
        tmpret3 = _ats2jspre_list_loop2_5(tmp27, tmp31, tmp26, tmp34);
      } else {
        tmpret3 = null;
      } // endif
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab8
      tmpret3 = null;
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret3;
} // end-of-function


function
_ats2jspre_list_loop1_4(arg0, arg1, arg2, arg3)
{
//
// knd = 1
  var apy0
  var apy1
  var apy2
  var apy3
  var tmpret4
  var tmp5
  var tmp6
  var tmp7
  var tmp8
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab__ats2jspre_list_loop1_4
    tmp5 = ats2jspre_gt_int0_int0(arg0, 0);
    if(tmp5) {
      tmp6 = ats2jspre_sub_int0_int0(arg0, 1);
      tmp7 = ats2jspre_sub_int0_int0(arg1, arg2);
      tmp8 = [arg1, arg3];
      // ATStailcalseq_beg
      apy0 = tmp6;
      apy1 = tmp7;
      apy2 = arg2;
      apy3 = tmp8;
      arg0 = apy0;
      arg1 = apy1;
      arg2 = apy2;
      arg3 = apy3;
      funlab_js = 1; // __patsflab__ats2jspre_list_loop1_4
      // ATStailcalseq_end
    } else {
      tmpret4 = arg3;
    } // endif
    if (funlab_js > 0) continue; else return tmpret4;
  } // endwhile-fun
} // end-of-function


function
_ats2jspre_list_loop2_5(arg0, arg1, arg2, arg3)
{
//
// knd = 1
  var apy0
  var apy1
  var apy2
  var apy3
  var tmpret9
  var tmp10
  var tmp11
  var tmp12
  var tmp13
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab__ats2jspre_list_loop2_5
    tmp10 = ats2jspre_gt_int0_int0(arg0, 0);
    if(tmp10) {
      tmp11 = ats2jspre_sub_int0_int0(arg0, 1);
      tmp12 = ats2jspre_add_int0_int0(arg1, arg2);
      tmp13 = [arg1, arg3];
      // ATStailcalseq_beg
      apy0 = tmp11;
      apy1 = tmp12;
      apy2 = arg2;
      apy3 = tmp13;
      arg0 = apy0;
      arg1 = apy1;
      arg2 = apy2;
      arg3 = apy3;
      funlab_js = 1; // __patsflab__ats2jspre_list_loop2_5
      // ATStailcalseq_end
    } else {
      tmpret9 = arg3;
    } // endif
    if (funlab_js > 0) continue; else return tmpret9;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_length(arg0)
{
//
// knd = 0
  var tmpret46
  var tmplab, tmplab_js
//
  // __patsflab_list_length
  tmpret46 = _ats2jspre_list_loop_12(arg0, 0);
  return tmpret46;
} // end-of-function


function
_ats2jspre_list_loop_12(arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmpret47
  var tmp49
  var tmp50
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab__ats2jspre_list_loop_12
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab13
        if(ATSCKptriscons(arg0)) { tmplab_js = 4; break; }
        case 2: // __atstmplab14
        tmpret47 = arg1;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab15
        case 4: // __atstmplab16
        tmp49 = arg0[1];
        tmp50 = ats2jspre_add_int1_int1(arg1, 1);
        // ATStailcalseq_beg
        apy0 = tmp49;
        apy1 = tmp50;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab__ats2jspre_list_loop_12
        // ATStailcalseq_end
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
    if (funlab_js > 0) continue; else return tmpret47;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_last(arg0)
{
//
// knd = 1
  var apy0
  var tmpret51
  var tmp52
  var tmp53
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_list_last
    tmp52 = arg0[0];
    tmp53 = arg0[1];
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab17
        if(ATSCKptriscons(tmp53)) { tmplab_js = 4; break; }
        case 2: // __atstmplab18
        tmpret51 = tmp52;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab19
        case 4: // __atstmplab20
        // ATStailcalseq_beg
        apy0 = tmp53;
        arg0 = apy0;
        funlab_js = 1; // __patsflab_list_last
        // ATStailcalseq_end
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
    if (funlab_js > 0) continue; else return tmpret51;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_get_at(arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmpret54
  var tmp55
  var tmp56
  var tmp57
  var tmp58
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_list_get_at
    tmp55 = ats2jspre_eq_int1_int1(arg1, 0);
    if(tmp55) {
      tmp56 = arg0[0];
      tmpret54 = tmp56;
    } else {
      tmp57 = arg0[1];
      tmp58 = ats2jspre_sub_int1_int1(arg1, 1);
      // ATStailcalseq_beg
      apy0 = tmp57;
      apy1 = tmp58;
      arg0 = apy0;
      arg1 = apy1;
      funlab_js = 1; // __patsflab_list_get_at
      // ATStailcalseq_end
    } // endif
    if (funlab_js > 0) continue; else return tmpret54;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_snoc(arg0, arg1)
{
//
// knd = 0
  var tmpret59
  var tmp60
  var tmp61
  var tmplab, tmplab_js
//
  // __patsflab_list_snoc
  tmp61 = null;
  tmp60 = [arg1, tmp61];
  tmpret59 = ats2jspre_list_append(arg0, tmp60);
  return tmpret59;
} // end-of-function


function
ats2jspre_list_extend(arg0, arg1)
{
//
// knd = 0
  var tmpret62
  var tmp63
  var tmp64
  var tmplab, tmplab_js
//
  // __patsflab_list_extend
  tmp64 = null;
  tmp63 = [arg1, tmp64];
  tmpret62 = ats2jspre_list_append(arg0, tmp63);
  return tmpret62;
} // end-of-function


function
ats2jspre_list_append(arg0, arg1)
{
//
// knd = 0
  var tmpret65
  var tmp66
  var tmp67
  var tmp68
  var tmplab, tmplab_js
//
  // __patsflab_list_append
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab21
      if(ATSCKptriscons(arg0)) { tmplab_js = 4; break; }
      case 2: // __atstmplab22
      tmpret65 = arg1;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab23
      case 4: // __atstmplab24
      tmp66 = arg0[0];
      tmp67 = arg0[1];
      tmp68 = ats2jspre_list_append(tmp67, arg1);
      tmpret65 = [tmp66, tmp68];
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret65;
} // end-of-function


function
ats2jspre_list_reverse(arg0)
{
//
// knd = 0
  var tmpret69
  var tmp70
  var tmplab, tmplab_js
//
  // __patsflab_list_reverse
  tmp70 = null;
  tmpret69 = ats2jspre_list_reverse_append(arg0, tmp70);
  return tmpret69;
} // end-of-function


function
ats2jspre_list_reverse_append(arg0, arg1)
{
//
// knd = 0
  var tmpret71
  var tmplab, tmplab_js
//
  // __patsflab_list_reverse_append
  tmpret71 = _ats2jspre_list_loop_20(arg0, arg1);
  return tmpret71;
} // end-of-function


function
_ats2jspre_list_loop_20(arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmpret72
  var tmp73
  var tmp74
  var tmp75
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab__ats2jspre_list_loop_20
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab25
        if(ATSCKptriscons(arg0)) { tmplab_js = 4; break; }
        case 2: // __atstmplab26
        tmpret72 = arg1;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab27
        case 4: // __atstmplab28
        tmp73 = arg0[0];
        tmp74 = arg0[1];
        tmp75 = [tmp73, arg1];
        // ATStailcalseq_beg
        apy0 = tmp74;
        apy1 = tmp75;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab__ats2jspre_list_loop_20
        // ATStailcalseq_end
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
    if (funlab_js > 0) continue; else return tmpret72;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_concat(arg0)
{
//
// knd = 0
  var tmpret76
  var tmplab, tmplab_js
//
  // __patsflab_list_concat
  tmpret76 = _ats2jspre_list_auxlst_22(arg0);
  return tmpret76;
} // end-of-function


function
_ats2jspre_list_auxlst_22(arg0)
{
//
// knd = 0
  var tmpret77
  var tmp78
  var tmp79
  var tmp80
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_auxlst_22
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab29
      if(ATSCKptriscons(arg0)) { tmplab_js = 4; break; }
      case 2: // __atstmplab30
      tmpret77 = null;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab31
      case 4: // __atstmplab32
      tmp78 = arg0[0];
      tmp79 = arg0[1];
      tmp80 = _ats2jspre_list_auxlst_22(tmp79);
      tmpret77 = ats2jspre_list_append(tmp78, tmp80);
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret77;
} // end-of-function


function
ats2jspre_list_take(arg0, arg1)
{
//
// knd = 0
  var tmpret81
  var tmp82
  var tmp83
  var tmp84
  var tmp85
  var tmp86
  var tmplab, tmplab_js
//
  // __patsflab_list_take
  tmp82 = ats2jspre_gt_int1_int1(arg1, 0);
  if(tmp82) {
    tmp83 = arg0[0];
    tmp84 = arg0[1];
    tmp86 = ats2jspre_sub_int1_int1(arg1, 1);
    tmp85 = ats2jspre_list_take(tmp84, tmp86);
    tmpret81 = [tmp83, tmp85];
  } else {
    tmpret81 = null;
  } // endif
  return tmpret81;
} // end-of-function


function
ats2jspre_list_drop(arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmpret87
  var tmp88
  var tmp89
  var tmp90
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_list_drop
    tmp88 = ats2jspre_gt_int1_int1(arg1, 0);
    if(tmp88) {
      tmp89 = arg0[1];
      tmp90 = ats2jspre_sub_int1_int1(arg1, 1);
      // ATStailcalseq_beg
      apy0 = tmp89;
      apy1 = tmp90;
      arg0 = apy0;
      arg1 = apy1;
      funlab_js = 1; // __patsflab_list_drop
      // ATStailcalseq_end
    } else {
      tmpret87 = arg0;
    } // endif
    if (funlab_js > 0) continue; else return tmpret87;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_split_at(arg0, arg1)
{
//
// knd = 0
  var tmpret91
  var tmp92
  var tmp93
  var tmplab, tmplab_js
//
  // __patsflab_list_split_at
  tmp92 = ats2jspre_list_take(arg0, arg1);
  tmp93 = ats2jspre_list_drop(arg0, arg1);
  tmpret91 = [tmp92, tmp93];
  return tmpret91;
} // end-of-function


function
ats2jspre_list_insert_at(arg0, arg1, arg2)
{
//
// knd = 0
  var tmpret94
  var tmp95
  var tmp96
  var tmp97
  var tmp98
  var tmp99
  var tmplab, tmplab_js
//
  // __patsflab_list_insert_at
  tmp95 = ats2jspre_gt_int1_int1(arg1, 0);
  if(tmp95) {
    tmp96 = arg0[0];
    tmp97 = arg0[1];
    tmp99 = ats2jspre_sub_int1_int1(arg1, 1);
    tmp98 = ats2jspre_list_insert_at(tmp97, tmp99, arg2);
    tmpret94 = [tmp96, tmp98];
  } else {
    tmpret94 = [arg2, arg0];
  } // endif
  return tmpret94;
} // end-of-function


function
ats2jspre_list_remove_at(arg0, arg1)
{
//
// knd = 0
  var tmpret100
  var tmp101
  var tmp102
  var tmp103
  var tmp104
  var tmp105
  var tmplab, tmplab_js
//
  // __patsflab_list_remove_at
  tmp101 = arg0[0];
  tmp102 = arg0[1];
  tmp103 = ats2jspre_gt_int1_int1(arg1, 0);
  if(tmp103) {
    tmp105 = ats2jspre_sub_int1_int1(arg1, 1);
    tmp104 = ats2jspre_list_remove_at(tmp102, tmp105);
    tmpret100 = [tmp101, tmp104];
  } else {
    tmpret100 = tmp102;
  } // endif
  return tmpret100;
} // end-of-function


function
ats2jspre_list_takeout_at(arg0, arg1)
{
//
// knd = 0
  var tmpret106
  var tmp107
  var tmp108
  var tmp109
  var tmp110
  var tmp111
  var tmp112
  var tmp113
  var tmp114
  var tmplab, tmplab_js
//
  // __patsflab_list_takeout_at
  tmp107 = arg0[0];
  tmp108 = arg0[1];
  tmp109 = ats2jspre_gt_int1_int1(arg1, 0);
  if(tmp109) {
    tmp111 = ats2jspre_sub_int1_int1(arg1, 1);
    tmp110 = ats2jspre_list_takeout_at(tmp108, tmp111);
    tmp112 = tmp110[0];
    tmp113 = tmp110[1];
    tmp114 = [tmp107, tmp113];
    tmpret106 = [tmp112, tmp114];
  } else {
    tmpret106 = [tmp107, tmp108];
  } // endif
  return tmpret106;
} // end-of-function


function
ats2jspre_list_exists(arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmpret115
  var tmp116
  var tmp117
  var tmp118
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_list_exists
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab33
        if(ATSCKptriscons(arg0)) { tmplab_js = 4; break; }
        case 2: // __atstmplab34
        tmpret115 = false;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab35
        case 4: // __atstmplab36
        tmp116 = arg0[0];
        tmp117 = arg0[1];
        tmp118 = arg1[0](arg1, tmp116);
        if(tmp118) {
          tmpret115 = true;
        } else {
          // ATStailcalseq_beg
          apy0 = tmp117;
          apy1 = arg1;
          arg0 = apy0;
          arg1 = apy1;
          funlab_js = 1; // __patsflab_list_exists
          // ATStailcalseq_end
        } // endif
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
    if (funlab_js > 0) continue; else return tmpret115;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_exists_method(arg0)
{
//
// knd = 0
  var tmpret119
  var tmplab, tmplab_js
//
  // __patsflab_list_exists_method
  tmpret119 = _ats2jspre_list_patsfun_31__closurerize(arg0);
  return tmpret119;
} // end-of-function


function
_ats2jspre_list_patsfun_31(env0, arg0)
{
//
// knd = 0
  var tmpret120
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_31
  tmpret120 = ats2jspre_list_exists(env0, arg0);
  return tmpret120;
} // end-of-function


function
ats2jspre_list_iexists(arg0, arg1)
{
//
// knd = 0
  var tmpret121
  var tmplab, tmplab_js
//
  // __patsflab_list_iexists
  tmpret121 = _ats2jspre_list_loop_33(arg1, 0, arg0);
  return tmpret121;
} // end-of-function


function
_ats2jspre_list_loop_33(env0, arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmpret122
  var tmp123
  var tmp124
  var tmp125
  var tmp126
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab__ats2jspre_list_loop_33
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab37
        if(ATSCKptriscons(arg1)) { tmplab_js = 4; break; }
        case 2: // __atstmplab38
        tmpret122 = false;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab39
        case 4: // __atstmplab40
        tmp123 = arg1[0];
        tmp124 = arg1[1];
        tmp125 = env0[0](env0, arg0, tmp123);
        if(tmp125) {
          tmpret122 = true;
        } else {
          tmp126 = ats2jspre_add_int1_int1(arg0, 1);
          // ATStailcalseq_beg
          apy0 = tmp126;
          apy1 = tmp124;
          arg0 = apy0;
          arg1 = apy1;
          funlab_js = 1; // __patsflab__ats2jspre_list_loop_33
          // ATStailcalseq_end
        } // endif
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
    if (funlab_js > 0) continue; else return tmpret122;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_iexists_method(arg0)
{
//
// knd = 0
  var tmpret127
  var tmplab, tmplab_js
//
  // __patsflab_list_iexists_method
  tmpret127 = _ats2jspre_list_patsfun_35__closurerize(arg0);
  return tmpret127;
} // end-of-function


function
_ats2jspre_list_patsfun_35(env0, arg0)
{
//
// knd = 0
  var tmpret128
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_35
  tmpret128 = ats2jspre_list_iexists(env0, arg0);
  return tmpret128;
} // end-of-function


function
ats2jspre_list_forall(arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmpret129
  var tmp130
  var tmp131
  var tmp132
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_list_forall
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab41
        if(ATSCKptriscons(arg0)) { tmplab_js = 4; break; }
        case 2: // __atstmplab42
        tmpret129 = true;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab43
        case 4: // __atstmplab44
        tmp130 = arg0[0];
        tmp131 = arg0[1];
        tmp132 = arg1[0](arg1, tmp130);
        if(tmp132) {
          // ATStailcalseq_beg
          apy0 = tmp131;
          apy1 = arg1;
          arg0 = apy0;
          arg1 = apy1;
          funlab_js = 1; // __patsflab_list_forall
          // ATStailcalseq_end
        } else {
          tmpret129 = false;
        } // endif
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
    if (funlab_js > 0) continue; else return tmpret129;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_forall_method(arg0)
{
//
// knd = 0
  var tmpret133
  var tmplab, tmplab_js
//
  // __patsflab_list_forall_method
  tmpret133 = _ats2jspre_list_patsfun_38__closurerize(arg0);
  return tmpret133;
} // end-of-function


function
_ats2jspre_list_patsfun_38(env0, arg0)
{
//
// knd = 0
  var tmpret134
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_38
  tmpret134 = ats2jspre_list_forall(env0, arg0);
  return tmpret134;
} // end-of-function


function
ats2jspre_list_iforall(arg0, arg1)
{
//
// knd = 0
  var tmpret135
  var tmplab, tmplab_js
//
  // __patsflab_list_iforall
  tmpret135 = _ats2jspre_list_loop_40(arg1, 0, arg0);
  return tmpret135;
} // end-of-function


function
_ats2jspre_list_loop_40(env0, arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmpret136
  var tmp137
  var tmp138
  var tmp139
  var tmp140
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab__ats2jspre_list_loop_40
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab45
        if(ATSCKptriscons(arg1)) { tmplab_js = 4; break; }
        case 2: // __atstmplab46
        tmpret136 = true;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab47
        case 4: // __atstmplab48
        tmp137 = arg1[0];
        tmp138 = arg1[1];
        tmp139 = env0[0](env0, arg0, tmp137);
        if(tmp139) {
          tmp140 = ats2jspre_add_int1_int1(arg0, 1);
          // ATStailcalseq_beg
          apy0 = tmp140;
          apy1 = tmp138;
          arg0 = apy0;
          arg1 = apy1;
          funlab_js = 1; // __patsflab__ats2jspre_list_loop_40
          // ATStailcalseq_end
        } else {
          tmpret136 = false;
        } // endif
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
    if (funlab_js > 0) continue; else return tmpret136;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_iforall_method(arg0)
{
//
// knd = 0
  var tmpret141
  var tmplab, tmplab_js
//
  // __patsflab_list_iforall_method
  tmpret141 = _ats2jspre_list_patsfun_42__closurerize(arg0);
  return tmpret141;
} // end-of-function


function
_ats2jspre_list_patsfun_42(env0, arg0)
{
//
// knd = 0
  var tmpret142
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_42
  tmpret142 = ats2jspre_list_iforall(env0, arg0);
  return tmpret142;
} // end-of-function


function
ats2jspre_list_app(arg0, arg1)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab_list_app
  ats2jspre_list_foreach(arg0, arg1);
  return/*_void*/;
} // end-of-function


function
ats2jspre_list_foreach(arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmp145
  var tmp146
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_list_foreach
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab49
        if(ATSCKptriscons(arg0)) { tmplab_js = 4; break; }
        case 2: // __atstmplab50
        // ATSINSmove_void
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab51
        case 4: // __atstmplab52
        tmp145 = arg0[0];
        tmp146 = arg0[1];
        arg1[0](arg1, tmp145);
        // ATStailcalseq_beg
        apy0 = tmp146;
        apy1 = arg1;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab_list_foreach
        // ATStailcalseq_end
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
    if (funlab_js > 0) continue; else return/*_void*/;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_foreach_method(arg0)
{
//
// knd = 0
  var tmpret148
  var tmplab, tmplab_js
//
  // __patsflab_list_foreach_method
  tmpret148 = _ats2jspre_list_patsfun_46__closurerize(arg0);
  return tmpret148;
} // end-of-function


function
_ats2jspre_list_patsfun_46(env0, arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_46
  ats2jspre_list_foreach(env0, arg0);
  return/*_void*/;
} // end-of-function


function
ats2jspre_list_iforeach(arg0, arg1)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab_list_iforeach
  _ats2jspre_list_aux_48(arg1, 0, arg0);
  return/*_void*/;
} // end-of-function


function
_ats2jspre_list_aux_48(env0, arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmp152
  var tmp153
  var tmp155
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab__ats2jspre_list_aux_48
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab53
        if(ATSCKptriscons(arg1)) { tmplab_js = 4; break; }
        case 2: // __atstmplab54
        // ATSINSmove_void
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab55
        case 4: // __atstmplab56
        tmp152 = arg1[0];
        tmp153 = arg1[1];
        env0[0](env0, arg0, tmp152);
        tmp155 = ats2jspre_add_int1_int1(arg0, 1);
        // ATStailcalseq_beg
        apy0 = tmp155;
        apy1 = tmp153;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab__ats2jspre_list_aux_48
        // ATStailcalseq_end
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
    if (funlab_js > 0) continue; else return/*_void*/;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_iforeach_method(arg0)
{
//
// knd = 0
  var tmpret156
  var tmplab, tmplab_js
//
  // __patsflab_list_iforeach_method
  tmpret156 = _ats2jspre_list_patsfun_50__closurerize(arg0);
  return tmpret156;
} // end-of-function


function
_ats2jspre_list_patsfun_50(env0, arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_50
  ats2jspre_list_iforeach(env0, arg0);
  return/*_void*/;
} // end-of-function


function
ats2jspre_list_rforeach(arg0, arg1)
{
//
// knd = 0
  var tmp159
  var tmp160
  var tmplab, tmplab_js
//
  // __patsflab_list_rforeach
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab57
      if(ATSCKptriscons(arg0)) { tmplab_js = 4; break; }
      case 2: // __atstmplab58
      // ATSINSmove_void
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab59
      case 4: // __atstmplab60
      tmp159 = arg0[0];
      tmp160 = arg0[1];
      ats2jspre_list_rforeach(tmp160, arg1);
      arg1[0](arg1, tmp159);
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return/*_void*/;
} // end-of-function


function
ats2jspre_list_rforeach_method(arg0)
{
//
// knd = 0
  var tmpret162
  var tmplab, tmplab_js
//
  // __patsflab_list_rforeach_method
  tmpret162 = _ats2jspre_list_patsfun_53__closurerize(arg0);
  return tmpret162;
} // end-of-function


function
_ats2jspre_list_patsfun_53(env0, arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_53
  ats2jspre_list_rforeach(env0, arg0);
  return/*_void*/;
} // end-of-function


function
ats2jspre_list_filter(arg0, arg1)
{
//
// knd = 0
  var tmpret164
  var tmplab, tmplab_js
//
  // __patsflab_list_filter
  tmpret164 = _ats2jspre_list_aux_55(arg1, arg0);
  return tmpret164;
} // end-of-function


function
_ats2jspre_list_aux_55(env0, arg0)
{
//
// knd = 1
  var apy0
  var tmpret165
  var tmp166
  var tmp167
  var tmp168
  var tmp169
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab__ats2jspre_list_aux_55
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab61
        if(ATSCKptriscons(arg0)) { tmplab_js = 4; break; }
        case 2: // __atstmplab62
        tmpret165 = null;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab63
        case 4: // __atstmplab64
        tmp166 = arg0[0];
        tmp167 = arg0[1];
        tmp168 = env0[0](env0, tmp166);
        if(tmp168) {
          tmp169 = _ats2jspre_list_aux_55(env0, tmp167);
          tmpret165 = [tmp166, tmp169];
        } else {
          // ATStailcalseq_beg
          apy0 = tmp167;
          arg0 = apy0;
          funlab_js = 1; // __patsflab__ats2jspre_list_aux_55
          // ATStailcalseq_end
        } // endif
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
    if (funlab_js > 0) continue; else return tmpret165;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_filter_method(arg0)
{
//
// knd = 0
  var tmpret170
  var tmplab, tmplab_js
//
  // __patsflab_list_filter_method
  tmpret170 = _ats2jspre_list_patsfun_57__closurerize(arg0);
  return tmpret170;
} // end-of-function


function
_ats2jspre_list_patsfun_57(env0, arg0)
{
//
// knd = 0
  var tmpret171
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_57
  tmpret171 = ats2jspre_list_filter(env0, arg0);
  return tmpret171;
} // end-of-function


function
ats2jspre_list_map(arg0, arg1)
{
//
// knd = 0
  var tmpret172
  var tmplab, tmplab_js
//
  // __patsflab_list_map
  tmpret172 = _ats2jspre_list_aux_59(arg1, arg0);
  return tmpret172;
} // end-of-function


function
_ats2jspre_list_aux_59(env0, arg0)
{
//
// knd = 0
  var tmpret173
  var tmp174
  var tmp175
  var tmp176
  var tmp177
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_aux_59
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab65
      if(ATSCKptriscons(arg0)) { tmplab_js = 4; break; }
      case 2: // __atstmplab66
      tmpret173 = null;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab67
      case 4: // __atstmplab68
      tmp174 = arg0[0];
      tmp175 = arg0[1];
      tmp176 = env0[0](env0, tmp174);
      tmp177 = _ats2jspre_list_aux_59(env0, tmp175);
      tmpret173 = [tmp176, tmp177];
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret173;
} // end-of-function


function
ats2jspre_list_map_method(arg0, arg1)
{
//
// knd = 0
  var tmpret178
  var tmplab, tmplab_js
//
  // __patsflab_list_map_method
  tmpret178 = _ats2jspre_list_patsfun_61__closurerize(arg0);
  return tmpret178;
} // end-of-function


function
_ats2jspre_list_patsfun_61(env0, arg0)
{
//
// knd = 0
  var tmpret179
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_61
  tmpret179 = ats2jspre_list_map(env0, arg0);
  return tmpret179;
} // end-of-function


function
ats2jspre_list_foldleft(arg0, arg1, arg2)
{
//
// knd = 0
  var tmpret180
  var tmplab, tmplab_js
//
  // __patsflab_list_foldleft
  tmpret180 = _ats2jspre_list_loop_63(arg2, arg1, arg0);
  return tmpret180;
} // end-of-function


function
_ats2jspre_list_loop_63(env0, arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmpret181
  var tmp182
  var tmp183
  var tmp184
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab__ats2jspre_list_loop_63
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab69
        if(ATSCKptriscons(arg1)) { tmplab_js = 4; break; }
        case 2: // __atstmplab70
        tmpret181 = arg0;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab71
        case 4: // __atstmplab72
        tmp182 = arg1[0];
        tmp183 = arg1[1];
        tmp184 = env0[0](env0, arg0, tmp182);
        // ATStailcalseq_beg
        apy0 = tmp184;
        apy1 = tmp183;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab__ats2jspre_list_loop_63
        // ATStailcalseq_end
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
    if (funlab_js > 0) continue; else return tmpret181;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_foldleft_method(arg0, arg1)
{
//
// knd = 0
  var tmpret185
  var tmplab, tmplab_js
//
  // __patsflab_list_foldleft_method
  tmpret185 = _ats2jspre_list_patsfun_65__closurerize(arg0, arg1);
  return tmpret185;
} // end-of-function


function
_ats2jspre_list_patsfun_65(env0, env1, arg0)
{
//
// knd = 0
  var tmpret186
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_65
  tmpret186 = ats2jspre_list_foldleft(env0, env1, arg0);
  return tmpret186;
} // end-of-function


function
ats2jspre_list_ifoldleft(arg0, arg1, arg2)
{
//
// knd = 0
  var tmpret187
  var tmplab, tmplab_js
//
  // __patsflab_list_ifoldleft
  tmpret187 = _ats2jspre_list_loop_67(arg2, 0, arg1, arg0);
  return tmpret187;
} // end-of-function


function
_ats2jspre_list_loop_67(env0, arg0, arg1, arg2)
{
//
// knd = 1
  var apy0
  var apy1
  var apy2
  var tmpret188
  var tmp189
  var tmp190
  var tmp191
  var tmp192
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab__ats2jspre_list_loop_67
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab73
        if(ATSCKptriscons(arg2)) { tmplab_js = 4; break; }
        case 2: // __atstmplab74
        tmpret188 = arg1;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab75
        case 4: // __atstmplab76
        tmp189 = arg2[0];
        tmp190 = arg2[1];
        tmp191 = ats2jspre_add_int1_int1(arg0, 1);
        tmp192 = env0[0](env0, arg0, arg1, tmp189);
        // ATStailcalseq_beg
        apy0 = tmp191;
        apy1 = tmp192;
        apy2 = tmp190;
        arg0 = apy0;
        arg1 = apy1;
        arg2 = apy2;
        funlab_js = 1; // __patsflab__ats2jspre_list_loop_67
        // ATStailcalseq_end
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
    if (funlab_js > 0) continue; else return tmpret188;
  } // endwhile-fun
} // end-of-function


function
ats2jspre_list_ifoldleft_method(arg0, arg1)
{
//
// knd = 0
  var tmpret193
  var tmplab, tmplab_js
//
  // __patsflab_list_ifoldleft_method
  tmpret193 = _ats2jspre_list_patsfun_69__closurerize(arg0, arg1);
  return tmpret193;
} // end-of-function


function
_ats2jspre_list_patsfun_69(env0, env1, arg0)
{
//
// knd = 0
  var tmpret194
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_69
  tmpret194 = ats2jspre_list_ifoldleft(env0, env1, arg0);
  return tmpret194;
} // end-of-function


function
ats2jspre_list_foldright(arg0, arg1, arg2)
{
//
// knd = 0
  var tmpret195
  var tmplab, tmplab_js
//
  // __patsflab_list_foldright
  tmpret195 = _ats2jspre_list_aux_71(arg1, arg0, arg2);
  return tmpret195;
} // end-of-function


function
_ats2jspre_list_aux_71(env0, arg0, arg1)
{
//
// knd = 0
  var tmpret196
  var tmp197
  var tmp198
  var tmp199
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_aux_71
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab77
      if(ATSCKptriscons(arg0)) { tmplab_js = 4; break; }
      case 2: // __atstmplab78
      tmpret196 = arg1;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab79
      case 4: // __atstmplab80
      tmp197 = arg0[0];
      tmp198 = arg0[1];
      tmp199 = _ats2jspre_list_aux_71(env0, tmp198, arg1);
      tmpret196 = env0[0](env0, tmp197, tmp199);
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret196;
} // end-of-function


function
ats2jspre_list_foldright_method(arg0, arg1)
{
//
// knd = 0
  var tmpret200
  var tmplab, tmplab_js
//
  // __patsflab_list_foldright_method
  tmpret200 = _ats2jspre_list_patsfun_73__closurerize(arg0, arg1);
  return tmpret200;
} // end-of-function


function
_ats2jspre_list_patsfun_73(env0, env1, arg0)
{
//
// knd = 0
  var tmpret201
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_73
  tmpret201 = ats2jspre_list_foldright(env0, arg0, env1);
  return tmpret201;
} // end-of-function


function
ats2jspre_list_ifoldright(arg0, arg1, arg2)
{
//
// knd = 0
  var tmpret202
  var tmplab, tmplab_js
//
  // __patsflab_list_ifoldright
  tmpret202 = _ats2jspre_list_aux_75(arg1, 0, arg0, arg2);
  return tmpret202;
} // end-of-function


function
_ats2jspre_list_aux_75(env0, arg0, arg1, arg2)
{
//
// knd = 0
  var tmpret203
  var tmp204
  var tmp205
  var tmp206
  var tmp207
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_aux_75
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab81
      if(ATSCKptriscons(arg1)) { tmplab_js = 4; break; }
      case 2: // __atstmplab82
      tmpret203 = arg2;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab83
      case 4: // __atstmplab84
      tmp204 = arg1[0];
      tmp205 = arg1[1];
      tmp207 = ats2jspre_add_int1_int1(arg0, 1);
      tmp206 = _ats2jspre_list_aux_75(env0, tmp207, tmp205, arg2);
      tmpret203 = env0[0](env0, arg0, tmp204, tmp206);
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret203;
} // end-of-function


function
ats2jspre_list_ifoldright_method(arg0, arg1)
{
//
// knd = 0
  var tmpret208
  var tmplab, tmplab_js
//
  // __patsflab_list_ifoldright_method
  tmpret208 = _ats2jspre_list_patsfun_77__closurerize(arg0, arg1);
  return tmpret208;
} // end-of-function


function
_ats2jspre_list_patsfun_77(env0, env1, arg0)
{
//
// knd = 0
  var tmpret209
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_77
  tmpret209 = ats2jspre_list_ifoldright(env0, arg0, env1);
  return tmpret209;
} // end-of-function


function
ats2jspre_streamize_list_elt(arg0)
{
//
// knd = 0
  var tmpret212
  var tmplab, tmplab_js
//
  // __patsflab_streamize_list_elt
  tmpret212 = _ats2jspre_list_auxmain_81(arg0);
  return tmpret212;
} // end-of-function


function
_ats2jspre_list_auxmain_81(arg0)
{
//
// knd = 0
  var tmpret213
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_auxmain_81
  tmpret213 = ATSPMVllazyval(_ats2jspre_list_patsfun_82__closurerize(arg0));
  return tmpret213;
} // end-of-function


function
_ats2jspre_list_patsfun_82(env0, arg0)
{
//
// knd = 0
  var tmpret214
  var tmp215
  var tmp216
  var tmp217
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_82
  if(arg0) {
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab85
        if(ATSCKptriscons(env0)) { tmplab_js = 4; break; }
        case 2: // __atstmplab86
        tmpret214 = null;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab87
        case 4: // __atstmplab88
        tmp215 = env0[0];
        tmp216 = env0[1];
        tmp217 = _ats2jspre_list_auxmain_81(tmp216);
        tmpret214 = [tmp215, tmp217];
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
  } else {
  } // endif
  return tmpret214;
} // end-of-function


function
ats2jspre_streamize_list_zip(arg0, arg1)
{
//
// knd = 0
  var tmpret218
  var tmplab, tmplab_js
//
  // __patsflab_streamize_list_zip
  tmpret218 = _ats2jspre_list_auxmain_84(arg0, arg1);
  return tmpret218;
} // end-of-function


function
_ats2jspre_list_auxmain_84(arg0, arg1)
{
//
// knd = 0
  var tmpret219
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_auxmain_84
  tmpret219 = ATSPMVllazyval(_ats2jspre_list_patsfun_85__closurerize(arg0, arg1));
  return tmpret219;
} // end-of-function


function
_ats2jspre_list_patsfun_85(env0, env1, arg0)
{
//
// knd = 0
  var tmpret220
  var tmp221
  var tmp222
  var tmp223
  var tmp224
  var tmp225
  var tmp226
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_85
  if(arg0) {
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab89
        if(ATSCKptriscons(env0)) { tmplab_js = 4; break; }
        case 2: // __atstmplab90
        tmpret220 = null;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab91
        case 4: // __atstmplab92
        tmp221 = env0[0];
        tmp222 = env0[1];
        // ATScaseofseq_beg
        tmplab_js = 1;
        while(true) {
          tmplab = tmplab_js; tmplab_js = 0;
          switch(tmplab) {
            // ATSbranchseq_beg
            case 1: // __atstmplab93
            if(ATSCKptriscons(env1)) { tmplab_js = 4; break; }
            case 2: // __atstmplab94
            tmpret220 = null;
            break;
            // ATSbranchseq_end
            // ATSbranchseq_beg
            case 3: // __atstmplab95
            case 4: // __atstmplab96
            tmp223 = env1[0];
            tmp224 = env1[1];
            tmp225 = [tmp221, tmp223];
            tmp226 = _ats2jspre_list_auxmain_84(tmp222, tmp224);
            tmpret220 = [tmp225, tmp226];
            break;
            // ATSbranchseq_end
          } // end-of-switch
          if (tmplab_js === 0) break;
        } // endwhile
        // ATScaseofseq_end
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
  } else {
  } // endif
  return tmpret220;
} // end-of-function


function
ats2jspre_streamize_list_cross(arg0, arg1)
{
//
// knd = 0
  var tmpret227
  var tmplab, tmplab_js
//
  // __patsflab_streamize_list_cross
  tmpret227 = _ats2jspre_list_auxmain_89(arg0, arg1);
  return tmpret227;
} // end-of-function


function
_ats2jspre_list_auxone_87(arg0, arg1)
{
//
// knd = 0
  var tmpret228
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_auxone_87
  tmpret228 = ATSPMVllazyval(_ats2jspre_list_patsfun_88__closurerize(arg0, arg1));
  return tmpret228;
} // end-of-function


function
_ats2jspre_list_patsfun_88(env0, env1, arg0)
{
//
// knd = 0
  var tmpret229
  var tmp230
  var tmp231
  var tmp232
  var tmp233
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_88
  if(arg0) {
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab97
        if(ATSCKptriscons(env1)) { tmplab_js = 4; break; }
        case 2: // __atstmplab98
        tmpret229 = null;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab99
        case 4: // __atstmplab100
        tmp230 = env1[0];
        tmp231 = env1[1];
        tmp232 = [env0, tmp230];
        tmp233 = _ats2jspre_list_auxone_87(env0, tmp231);
        tmpret229 = [tmp232, tmp233];
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
  } else {
  } // endif
  return tmpret229;
} // end-of-function


function
_ats2jspre_list_auxmain_89(arg0, arg1)
{
//
// knd = 0
  var tmpret234
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_auxmain_89
  tmpret234 = ATSPMVllazyval(_ats2jspre_list_patsfun_90__closurerize(arg0, arg1));
  return tmpret234;
} // end-of-function


function
_ats2jspre_list_patsfun_90(env0, env1, arg0)
{
//
// knd = 0
  var tmpret235
  var tmp236
  var tmp237
  var tmp238
  var tmp239
  var tmp240
  var tmplab, tmplab_js
//
  // __patsflab__ats2jspre_list_patsfun_90
  if(arg0) {
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab101
        if(ATSCKptriscons(env0)) { tmplab_js = 4; break; }
        case 2: // __atstmplab102
        tmpret235 = null;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab103
        case 4: // __atstmplab104
        tmp236 = env0[0];
        tmp237 = env0[1];
        tmp239 = _ats2jspre_list_auxone_87(tmp236, env1);
        tmp240 = _ats2jspre_list_auxmain_89(tmp237, env1);
        tmp238 = ats2jspre_stream_vt_append(tmp239, tmp240);
        tmpret235 = ATSPMVllazyval_eval(tmp238);
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
  } else {
  } // endif
  return tmpret235;
} // end-of-function


function
ats2jspre_list_sort_2(arg0, arg1)
{
//
// knd = 0
  var tmpret248
  var tmp249
  var tmp251
  var tmp257
  var tmp258
  var tmplab, tmplab_js
//
  // __patsflab_list_sort_2
  tmp249 = ats2jspre_JSarray_make_list(arg0);
  ats2jspre_JSarray_sort_2(tmp249, arg1);
  tmp251 = ats2jspre_JSarray_length(tmp249);
  tmp258 = null;
  tmp257 = _ats2jspre_list_loop_99(tmp249, tmp251, 0, tmp258);
  tmpret248 = tmp257;
  return tmpret248;
} // end-of-function


function
_ats2jspre_list_loop_99(env0, env1, arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmpret252
  var tmp253
  var tmp254
  var tmp255
  var tmp256
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab__ats2jspre_list_loop_99
    tmp253 = ats2jspre_lt_int0_int0(arg0, env1);
    if(tmp253) {
      tmp254 = ats2jspre_add_int0_int0(arg0, 1);
      tmp256 = ats2jspre_JSarray_pop(env0);
      tmp255 = [tmp256, arg1];
      // ATStailcalseq_beg
      apy0 = tmp254;
      apy1 = tmp255;
      arg0 = apy0;
      arg1 = apy1;
      funlab_js = 1; // __patsflab__ats2jspre_list_loop_99
      // ATStailcalseq_end
    } else {
      tmpret252 = arg1;
    } // endif
    if (funlab_js > 0) continue; else return tmpret252;
  } // endwhile-fun
} // end-of-function


/* ****** ****** */

/* end-of-compilation-unit */
